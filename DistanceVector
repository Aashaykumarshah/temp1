#!/usr/bin/env python3
import sys
import math

INF = math.inf

def parse_input():
    nodes = []
    for line in sys.stdin:
        tok = line.strip()
        if not tok: continue
        if tok == "START":
            break
        nodes.append(tok)

    edges = []
    for line in sys.stdin:
        tok = line.strip()
        if not tok: continue
        if tok == "UPDATE":
            break
        u, v, w = tok.split()
        edges.append((u, v, int(w)))

    updates = []
    for line in sys.stdin:
        tok = line.strip()
        if not tok: continue
        if tok == "END":
            break
        u, v, w = tok.split()
        updates.append((u, v, int(w)))

    return nodes, edges, updates

def run_dv(nodes, edges, start_time):
    graph = {n: {} for n in nodes}
    for u, v, w in edges:
        graph[u][v] = w
        graph[v][u] = w

    # Initialize distance table
    dt = {}
    for x in nodes:
        dt[x] = {}
        for dest in nodes:
            if dest == x:
                continue
            dt[x][dest] = {}
            for via in nodes:
                if via != x:
                    dt[x][dest][via] = INF
        for nbr, cost in graph[x].items():
            if nbr in dt[x]:
                dt[x][nbr][nbr] = cost

    t = start_time
    print_distance_tables(nodes, dt, t)
    t += 1

    while True:
        # Build distance vectors from current distance tables
        dv = {}
        for n in nodes:
            dv[n] = {}
            for dest in nodes:
                if dest == n:
                    dv[n][dest] = 0
                elif dest in dt[n]:
                    min_cost = INF
                    for via, cost in dt[n][dest].items():
                        if cost < min_cost or (cost == min_cost and via < n):
                            min_cost = cost
                    dv[n][dest] = min_cost

        updated = False

        # Recalculate entire table for all nodes
        for x in nodes:
            for dest in dt[x]:
                for via in dt[x][dest]:
                    if via in graph[x]:
                        cost_to_via = graph[x][via]
                        cost_via_to_dest = dv[via][dest]
                        new_cost = cost_to_via + cost_via_to_dest
                    else:
                        new_cost = INF
                    if dt[x][dest][via] != new_cost:
                        dt[x][dest][via] = new_cost
                        updated = True

        if not updated:
            break

        print_distance_tables(nodes, dt, t)
        t += 1

    print_routing_tables(nodes, dt)
    return t

def print_distance_tables(nodes, dt, t):
    for x in sorted(nodes):
        print(f"Distance Table of router {x} at t={t}:")
        others = [n for n in sorted(nodes) if n != x]
        print("   " + " ".join(others))
        for dest in others:
            row = [dest]
            for via in others:
                c = dt[x][dest][via]
                row.append(str(int(c)) if c != INF else "INF")
            print("   " + " ".join(row))
        print()

def print_routing_tables(nodes, dt):
    for x in sorted(nodes):
        print(f"Routing Table of router {x}:")
        for dest in sorted(nodes):
            if dest == x:
                continue
            via, cost = min(dt[x][dest].items(), key=lambda kv: kv[1])
            if cost == INF:
                print(f"{dest},INF,INF")
            else:
                print(f"{dest},{via},{int(cost)}")
        print()

def main():
    nodes, edges, updates = parse_input()
    t = 0
    t = run_dv(nodes, edges, t)

    if updates:
        for u, v, w in updates:
            edges = [e for e in edges if not ((e[0]==u and e[1]==v) or (e[0]==v and e[1]==u))]
            if w >= 0:
                edges.append((u, v, w))
            if u not in nodes:
                nodes.append(u)
            if v not in nodes:
                nodes.append(v)

        run_dv(nodes, edges, t)

if __name__ == "__main__":
    main()
