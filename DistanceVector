#!/usr/bin/env python3
import sys
import math

INF = math.inf

def run_dv(nodes, edges, start_time):
    graph = {n: {} for n in nodes}
    for u, v, w in edges:
        graph[u][v] = w
        graph[v][u] = w

    dt = {}
    for x in nodes:
        dt[x] = {}
        for dest in nodes:
            if dest == x:
                continue
            dt[x][dest] = { via: INF for via in nodes if via != x }
        for nbr, w in graph[x].items():
            if nbr in dt[x]:
                dt[x][nbr][nbr] = w

    t = start_time
    print_distance_tables(nodes, dt, t)
    t += 1

    while True:
        adv = {src: {dst: (0 if src == dst else min(dt[src][dst].values())) for dst in nodes} for src in nodes}
        updated = False

        for x in nodes:
            for src, cost_x_src in graph[x].items():
                for dest in dt[x]:
                    nc = cost_x_src + adv[src][dest]
                    if nc < dt[x][dest][src]:
                        dt[x][dest][src] = nc
                        updated = True

        if not updated:
            break

        print_distance_tables(nodes, dt, t)
        t += 1

    print_routing_tables(nodes, dt)
    return t

def print_distance_tables(nodes, dt, t):
    for x in sorted(nodes):
        print(f"Distance Table of router {x} at t={t}:")
        others = [n for n in sorted(nodes) if n != x]
        for dest in others:
            row = f"{dest}"
            for via in others:
                cost = dt[x][dest][via]
                row += f"{str(int(cost)).rjust(5)}" if cost != INF else "  INF"
            print(row)
        print()

def print_routing_tables(nodes, dt):
    for x in sorted(nodes):
        print(f"Routing Table of router {x}:")
        for dest in sorted(nodes):
            if dest == x:
                continue
            best_cost = INF
            best_via = None
            for via in sorted(dt[x][dest].keys()):
                cost = dt[x][dest][via]
                if cost < best_cost:
                    best_cost = cost
                    best_via = via
            if best_cost == INF:
                print(f"{dest},INF,INF")
            else:
                print(f"{dest},{best_via},{int(best_cost)}")
        print("")

def main():
    t = 0
    lines = sys.stdin.read().splitlines()
    i = 0
    while i < len(lines):
        # Parse nodes
        nodes = []
        while i < len(lines) and lines[i].strip() != "START":
            if lines[i].strip():
                nodes.append(lines[i].strip())
            i += 1
        i += 1  # skip START

        # Parse edges
        edges = []
        while i < len(lines) and lines[i].strip() != "UPDATE":
            if lines[i].strip():
                u, v, w = lines[i].strip().split()
                edges.append((u, v, int(w)))
            i += 1
        i += 1  # skip UPDATE

        # Parse updates
        updates = []
        while i < len(lines) and lines[i].strip() != "END":
            if lines[i].strip():
                u, v, w = lines[i].strip().split()
                updates.append((u, v, int(w)))
            i += 1
        i += 1  # skip END

        # Run initial DV
        t = run_dv(sorted(nodes), edges, t)

        # Apply updates
        if updates:
            for u, v, w in updates:
                edges = [e for e in edges if not ((e[0] == u and e[1] == v) or (e[0] == v and e[1] == u))]
                if w >= 0:
                    edges.append((u, v, w))
                if u not in nodes:
                    nodes.append(u)
                if v not in nodes:
                    nodes.append(v)
            t = run_dv(sorted(nodes), edges, t)

if __name__ == "__main__":
    main()
